// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.17.3
// source: all.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// broker的具体信息
type Broker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint    string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	IsAvailable string `protobuf:"bytes,2,opt,name=IsAvailable,proto3" json:"IsAvailable,omitempty"`
	IsRunning   bool   `protobuf:"varint,3,opt,name=IsRunning,proto3" json:"IsRunning,omitempty"`
}

func (x *Broker) Reset() {
	*x = Broker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broker) ProtoMessage() {}

func (x *Broker) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broker.ProtoReflect.Descriptor instead.
func (*Broker) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{0}
}

func (x *Broker) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Broker) GetIsAvailable() string {
	if x != nil {
		return x.IsAvailable
	}
	return ""
}

func (x *Broker) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

// reqReg里面包含着请求的NameServer的
// endpoint: ip地址加端口号,集群选择在内部实现即可.
// role：代表此次来的是producer还是consumer，涉及到调度器的选择
// 以及内部的调度负载均衡
type ReqReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *ReqReg) Reset() {
	*x = ReqReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReg) ProtoMessage() {}

func (x *ReqReg) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReg.ProtoReflect.Descriptor instead.
func (*ReqReg) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{1}
}

func (x *ReqReg) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type RegistryMes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers []*Broker `protobuf:"bytes,1,rep,name=Brokers,proto3" json:"Brokers,omitempty"`
}

func (x *RegistryMes) Reset() {
	*x = RegistryMes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryMes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryMes) ProtoMessage() {}

func (x *RegistryMes) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryMes.ProtoReflect.Descriptor instead.
func (*RegistryMes) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{2}
}

func (x *RegistryMes) GetBrokers() []*Broker {
	if x != nil {
		return x.Brokers
	}
	return nil
}

var File_all_proto protoreflect.FileDescriptor

var file_all_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x64, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x1c, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x52,
	0x65, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x32, 0x4c,
	0x0a, 0x0f, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x39, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x71, 0x52, 0x65, 0x67, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_all_proto_rawDescOnce sync.Once
	file_all_proto_rawDescData = file_all_proto_rawDesc
)

func file_all_proto_rawDescGZIP() []byte {
	file_all_proto_rawDescOnce.Do(func() {
		file_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_all_proto_rawDescData)
	})
	return file_all_proto_rawDescData
}

var file_all_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_all_proto_goTypes = []interface{}{
	(*Broker)(nil),      // 0: proto.broker
	(*ReqReg)(nil),      // 1: proto.reqReg
	(*RegistryMes)(nil), // 2: proto.registryMes
}
var file_all_proto_depIdxs = []int32{
	0, // 0: proto.registryMes.Brokers:type_name -> proto.broker
	1, // 1: proto.AcquireRegistry.ListRegisteredBroker:input_type -> proto.reqReg
	2, // 2: proto.AcquireRegistry.ListRegisteredBroker:output_type -> proto.registryMes
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_all_proto_init() }
func file_all_proto_init() {
	if File_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Broker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryMes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_all_proto_goTypes,
		DependencyIndexes: file_all_proto_depIdxs,
		MessageInfos:      file_all_proto_msgTypes,
	}.Build()
	File_all_proto = out.File
	file_all_proto_rawDesc = nil
	file_all_proto_goTypes = nil
	file_all_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AcquireRegistryClient is the client API for AcquireRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AcquireRegistryClient interface {
	ListRegisteredBroker(ctx context.Context, in *ReqReg, opts ...grpc.CallOption) (*RegistryMes, error)
}

type acquireRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewAcquireRegistryClient(cc grpc.ClientConnInterface) AcquireRegistryClient {
	return &acquireRegistryClient{cc}
}

func (c *acquireRegistryClient) ListRegisteredBroker(ctx context.Context, in *ReqReg, opts ...grpc.CallOption) (*RegistryMes, error) {
	out := new(RegistryMes)
	err := c.cc.Invoke(ctx, "/proto.AcquireRegistry/ListRegisteredBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcquireRegistryServer is the server API for AcquireRegistry service.
type AcquireRegistryServer interface {
	ListRegisteredBroker(context.Context, *ReqReg) (*RegistryMes, error)
}

// UnimplementedAcquireRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedAcquireRegistryServer struct {
}

func (*UnimplementedAcquireRegistryServer) ListRegisteredBroker(context.Context, *ReqReg) (*RegistryMes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredBroker not implemented")
}

func RegisterAcquireRegistryServer(s *grpc.Server, srv AcquireRegistryServer) {
	s.RegisterService(&_AcquireRegistry_serviceDesc, srv)
}

func _AcquireRegistry_ListRegisteredBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquireRegistryServer).ListRegisteredBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AcquireRegistry/ListRegisteredBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquireRegistryServer).ListRegisteredBroker(ctx, req.(*ReqReg))
	}
	return interceptor(ctx, in, info, handler)
}

var _AcquireRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AcquireRegistry",
	HandlerType: (*AcquireRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegisteredBroker",
			Handler:    _AcquireRegistry_ListRegisteredBroker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "all.proto",
}
